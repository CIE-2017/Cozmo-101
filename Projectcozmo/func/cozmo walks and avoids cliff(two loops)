import cozmo, time, asyncio
import os
from cozmo.util import degrees, Pose, distance_mm, speed_mmps
from PIL import Image
cwd = os.getcwd()
num= 1
print(cwd)
faces = []

def cozmo_program(robot: cozmo.robot.Robot) :
    count_distance = 0
    while True:
        for i in range(6):
            robot.drive_straight(distance_mm(300), speed_mmps(100)).wait_for_completed() #move foward
        
            count_distance = count_distance+300
            print (count_distance)
        
            robot.turn_in_place(degrees(90)).wait_for_completed() #robot turns 90 degrees
            robot.set_head_angle(cozmo.robot.MAX_HEAD_ANGLE).wait_for_completed() #robot lifts head to max head angle
        
            try:
                face_event = robot.world.wait_for(cozmo.faces.EvtFaceObserved, timeout=6) #tries to find the face for 6 secs
                print ("Face found") #prints "face found"
            
                robot.set_all_backpack_lights(cozmo.lights.green_light)
            
                face_id = face_event.face.face_id #gets the face id of the person
                faces.append(face_id) #face id of the person is added to the empty list above
            
                cozmo_take_pic(robot) #cozmo then takes a picture and saves it
            
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees to face the other side

            except asyncio.TimeoutError : #in the case that cozmo does not find a face
                print("New face not found") #prints "new face not found"
            
                robot.set_all_backpack_lights(cozmo.lights.off_light)
            
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees to face the other side
            
            try:
                face_event = robot.world.wait_for(cozmo.faces.EvtFaceObserved, timeout=6) #tries to find the face for 6 seconds
                print ("Face found") #print "face found"
            
                robot.set_all_backpack_lights(cozmo.lights.green_light)
            
                face_id = face_event.face.face_id #saves face idea as a variable
                faces.append(face_id) #adds face id into empty list above
            
                cozmo_take_pic(robot) #takes a picture of the person and saves it
            
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees to initial position to keep walking
            
            except asyncio.TimeoutError : #in the case that cozmo does not find a face
                print("No new face found")
            
                robot.set_all_backpack_lights(cozmo.lights.off_light)
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees to get back to inital position


        robot.turn_in_place(degrees(180)).wait_for_completed()


        for i in range(6):
            robot.drive_straight(distance_mm(300), speed_mmps(100)).wait_for_completed() #move foward
        
            count_distance = count_distance+300
            print (count_distance)
        
            robot.turn_in_place(degrees(90)).wait_for_completed() #robot turns 90 degrees
            robot.set_head_angle(cozmo.robot.MAX_HEAD_ANGLE).wait_for_completed() #robot lifts head to max head angle
        
            try:
                face_event = robot.world.wait_for(cozmo.faces.EvtFaceObserved, timeout=6) #tries to find the face for 6 secs
                print ("Face found") #prints "face found"
            
                robot.set_all_backpack_lights(cozmo.lights.green_light)
            
                face_id = face_event.face.face_id #gets the face id of the person
                faces.append(face_id) #face id of the person is added to the empty list above
            
                cozmo_take_pic(robot) #cozmo then takes a picture and saves it
            
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees to face the other side

            except asyncio.TimeoutError : #in the case that cozmo does not find a face
                print("New face not found") #prints "new face not found"
            
                robot.set_all_backpack_lights(cozmo.lights.off_light)
            
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees to face the other side
            
            try:
                face_event = robot.world.wait_for(cozmo.faces.EvtFaceObserved, timeout=6) #tries to find the face for 6 seconds
                print ("Face found") #print "face found"
            
                robot.set_all_backpack_lights(cozmo.lights.green_light)
            
                face_id = face_event.face.face_id #saves face idea as a variable
                faces.append(face_id) #adds face id into empty list above
            
                cozmo_take_pic(robot) #takes a picture of the person and saves it
            
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees to initial position to keep walking
            
            except asyncio.TimeoutError : #in the case that cozmo does not find a face
                print("No new face found")
            
                robot.set_all_backpack_lights(cozmo.lights.off_light)
                robot.turn_in_place(degrees(90)).wait_for_completed() #turns 90 degrees to get back to inital position
            

def cozmo_take_pic(robot: cozmo.robot.Robot):
    global num
    cozmo.camera.Camera.image_stream_enabled = True #set to true so that images can be received
    latest_image = robot.world.latest_image #get the latest image from Cozmo's camera
    img = latest_image.annotate_image() #resize it, this will return an image
    img.save(cwd+'/pic/test%s.jpg' %num)
    print (latest_image) #not necessary
    img.show() #show the image
    num+=1

cozmo.run_program(cozmo_program, use_viewer=True)

